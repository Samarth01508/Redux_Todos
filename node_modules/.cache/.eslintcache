[{"/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/index.js":"1","/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/App.js":"2","/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/store.js":"3","/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/Todos.js":"4","/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/actions.js":"5","/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/reducer.js":"6"},{"size":255,"mtime":1683618886210,"results":"7","hashOfConfig":"8"},{"size":306,"mtime":1683621671131,"results":"9","hashOfConfig":"8"},{"size":140,"mtime":1683634150851,"results":"10","hashOfConfig":"8"},{"size":1985,"mtime":1683633627224,"results":"11","hashOfConfig":"8"},{"size":427,"mtime":1683633744683,"results":"12","hashOfConfig":"8"},{"size":1965,"mtime":1683633972201,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"194yh92",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/index.js",[],[],[],"/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/App.js",[],[],"/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/store.js",[],[],"/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/Todos.js",["34"],[],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addTodo, toggleTodo, removeTodo } from \"./actions\";\nimport store from \"./store\";\n\nfunction Todos() {\n  const [taskText, setTaskText] = useState(\"\");\n  const dispatch = useDispatch();\n  const state = store.getState();\n  //console.log(state);\n\n  function handleAddTask() {\n    if (taskText.trim() === \"\") {\n      return;\n    }\n    dispatch(addTodo(taskText));\n    setTaskText(\"\");\n  }\n\n  function handleToggleTask(task) {\n    dispatch(toggleTodo(task.id));\n  }\n\n  function handleRemoveTask(task){\n    dispatch(removeTodo(task.id));\n  }\n\n  const incomplete = useSelector((state) => state.incomplete);\n  const complete = useSelector((state) => state.complete);\n\n  return (\n    <div>\n      <h1 className=\"heading\">Todos App</h1>\n      <input\n        type=\"text\"\n        value={taskText}\n        onChange={(e) => setTaskText(e.target.value)}\n        id=\"task-input-bar\"\n      />\n      <button onClick={handleAddTask} id=\"addTask-button\">\n        Add Task\n      </button>\n\n      <h2>Incomplete Tasks</h2>\n      <ul className=\"incomplete-taskList\">\n        {incomplete.map((task) => (\n          <li key={task.id} className=\"taskList-element\">\n            {task.text}{\" \"}\n            <button onClick={()=>handleRemoveTask(task)} className=\"Remove-btn\">Remove</button>\n            <button onClick={() => handleToggleTask(task)} className=\"Complete-btn\">Complete</button>\n          </li>\n        ))}\n      </ul>\n\n      <h2>Complete Tasks</h2>\n      <ul className=\"completed-taskList\">\n        {complete.map((task) => (\n          <li key={task.id} className=\"taskList-element\">\n            {task.text}{\" \"}\n            <button onClick={()=>handleRemoveTask(task)} className=\"Remove-btn\">Remove</button>\n            <button onClick={() => handleToggleTask(task)} className=\"Incomplete-btn\">Incomplete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default Todos;\n","/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/actions.js",[],[],"/Users/samartha/Desktop/Practice/Todos with Redux/react-app-with-redux/src/reducer.js",[],[],{"ruleId":"35","severity":1,"message":"36","line":9,"column":9,"nodeType":"37","messageId":"38","endLine":9,"endColumn":14},"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar"]